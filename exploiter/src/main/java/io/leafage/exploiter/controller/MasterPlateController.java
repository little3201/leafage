/*
 * Copyright (c) 2024-2025.  little3201.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.leafage.exploiter.controller;

import io.leafage.exploiter.dto.MasterPlateDTO;
import io.leafage.exploiter.service.MasterPlateService;
import io.leafage.exploiter.vo.MasterPlateVO;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import top.leafage.common.poi.ExcelReader;

import java.util.List;

@RestController
@RequestMapping("/master-plates")
public class MasterPlateController {

    private final Logger logger = LoggerFactory.getLogger(MasterPlateController.class);

    private final MasterPlateService masterPlateService;

    /**
     * Constructor for Controller.
     *
     * @param masterPlateService a {@link MasterPlateService} object
     */
    public MasterPlateController(MasterPlateService masterPlateService) {
        this.masterPlateService = masterPlateService;
    }

    /**
     * Retrieves a paginated list of records.
     *
     * @param page       The page number.
     * @param size       The number of records per page.
     * @param sortBy     The field to sort by.
     * @param descending Whether sorting should be in descending order.
     * @param filters    The filters.
     * @return A paginated list of schemas, or 204 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates')")
    @GetMapping
    public ResponseEntity<Page<MasterPlateVO>> retrieve(@RequestParam int page, @RequestParam int size,
                                                        String sortBy, boolean descending, String filters) {
        Page<MasterPlateVO> voPage;
        try {
            voPage = masterPlateService.retrieve(page, size, sortBy, descending, filters);
        } catch (Exception e) {
            logger.error("Retrieve template error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(voPage);
    }

    /**
     * Fetches a record by ID.
     *
     * @param id The record ID.
     * @return The record data, or 204 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates')")
    @GetMapping("/{id}")
    public ResponseEntity<MasterPlateVO> fetch(@PathVariable Long id) {
        MasterPlateVO vo;
        try {
            vo = masterPlateService.fetch(id);
        } catch (Exception e) {
            logger.error("Fetch template error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(vo);
    }

    /**
     * Checks if a record exists by name, suffix, version.
     *
     * @param name    The record name.
     * @param suffix  The record suffix.
     * @param version The record version.
     * @param id      The record ID.
     * @return True if the record exists, or 204 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates')")
    @GetMapping("/exists")
    public ResponseEntity<Boolean> exists(@RequestParam String name, @RequestParam String suffix, @RequestParam String type,
                                          @RequestParam String version, Long id) {
        boolean exists;
        try {
            exists = masterPlateService.exists(name, suffix, type, version, id);
        } catch (Exception e) {
            logger.info("Query template exists error: ", e);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(exists);
    }

    /**
     * Creates a new record.
     *
     * @param dto The record data transfer object.
     * @return The created record, or 417 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates:create')")
    @PostMapping
    public ResponseEntity<MasterPlateVO> create(@Valid @RequestBody MasterPlateDTO dto) {
        MasterPlateVO vo;
        try {
            boolean existed = masterPlateService.exists(dto.getName(), null);
            if (existed) {
                return ResponseEntity.status(HttpStatus.CONFLICT).build();
            }
            vo = masterPlateService.create(dto);
        } catch (Exception e) {
            logger.error("Create template error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.status(HttpStatus.CREATED).body(vo);
    }

    /**
     * Modifies an existing record.
     *
     * @param id  The record ID.
     * @param dto The record data transfer object.
     * @return The modified record, or 417 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates:modify')")
    @PutMapping("/{id}")
    public ResponseEntity<MasterPlateVO> modify(@PathVariable Long id, @Valid @RequestBody MasterPlateDTO dto) {
        MasterPlateVO vo;
        try {
            vo = masterPlateService.modify(id, dto);
        } catch (Exception e) {
            logger.error("Modify template error: ", e);
            return ResponseEntity.status(HttpStatus.NOT_MODIFIED).build();
        }
        return ResponseEntity.accepted().body(vo);
    }

    /**
     * Removes a record by ID.
     *
     * @param id The record ID.
     * @return 200 status code if successful, or 417 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates:remove')")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> remove(@PathVariable Long id) {
        try {
            masterPlateService.remove(id);
        } catch (Exception e) {
            logger.error("Remove template error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().build();
    }

    /**
     * Enable a record when enabled is false or disable when enabled is ture.
     *
     * @param id The record ID.
     * @return 200 status code if successful, or 417 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates:enable')")
    @PatchMapping("/{id}")
    public ResponseEntity<Boolean> enable(@PathVariable Long id) {
        boolean enabled;
        try {
            enabled = masterPlateService.enable(id);
        } catch (Exception e) {
            logger.error("Toggle enabled error: ", e);
            return ResponseEntity.status(HttpStatus.NOT_MODIFIED).build();
        }
        return ResponseEntity.accepted().body(enabled);
    }

    /**
     * Import the records.
     *
     * @return 200 status code if successful, or 417 status code if an error occurs.
     */
    @PreAuthorize("hasAuthority('SCOPE_master_plates:import')")
    @PostMapping("/import")
    public ResponseEntity<List<MasterPlateVO>> importFromFile(MultipartFile file) {
        List<MasterPlateVO> voList;
        try {
            List<MasterPlateDTO> dtoList = ExcelReader.read(file.getInputStream(), MasterPlateDTO.class);
            voList = masterPlateService.createAll(dtoList);
        } catch (Exception e) {
            logger.error("Import master plate error: ", e);
            return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).build();
        }
        return ResponseEntity.ok().body(voList);
    }

}

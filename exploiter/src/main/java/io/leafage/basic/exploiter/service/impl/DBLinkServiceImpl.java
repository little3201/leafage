/*
 * Copyright (c) 2025.  little3201.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.leafage.basic.exploiter.service.impl;

import io.leafage.basic.exploiter.domain.DBLink;
import io.leafage.basic.exploiter.dto.DBLinkDTO;
import io.leafage.basic.exploiter.repository.DBLinkRepository;
import io.leafage.basic.exploiter.service.DBLinkService;
import io.leafage.basic.exploiter.service.DBService;
import io.leafage.basic.exploiter.vo.DBLinkVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import java.util.Collections;
import java.util.List;

@Service
public class DBLinkServiceImpl implements DBLinkService {

    private final DBLinkRepository DBLinkRepository;
    private final DBService dbService;

    public DBLinkServiceImpl(DBLinkRepository DBLinkRepository, DBService dbService) {
        this.DBLinkRepository = DBLinkRepository;
        this.dbService = dbService;
    }

    @Override
    public Page<DBLinkVO> retrieve(int page, int size, String sortBy, boolean descending, String name) {
        Pageable pageable = pageable(page, size, sortBy, descending);

        if (StringUtils.hasText(name)) {
            return DBLinkRepository.findAllByNameContaining(name, pageable)
                    .map(DBLink -> convertToVO(DBLink, DBLinkVO.class));
        }
        return DBLinkRepository.findAll(pageable)
                .map(DBLink -> convertToVO(DBLink, DBLinkVO.class));
    }

    @Override
    public List<DBLinkVO> retrieve(List<Long> ids) {
        if (CollectionUtils.isEmpty(ids)) {
            return DBLinkRepository.findAll().stream()
                    .map(DBLink -> convertToVO(DBLink, DBLinkVO.class)).toList();
        } else {
            return DBLinkRepository.findAllById(ids).stream()
                    .map(DBLink -> convertToVO(DBLink, DBLinkVO.class)).toList();
        }
    }

    @Override
    public DBLinkVO fetch(Long id) {
        return DBLinkRepository.findById(id).map(DBLink -> convertToVO(DBLink, DBLinkVO.class)).orElse(null);
    }

    @Override
    public List<String> tables(Long id) {
        return DBLinkRepository.findById(id).map(DBLink ->
                        dbService.findAllTables(DBLink.getHost(), DBLink.getPort(),
                                DBLink.getName(), DBLink.getUsername(), DBLink.getPassword()))
                .orElse(Collections.emptyList());
    }

    @Override
    public DBLinkVO create(DBLinkDTO dto) {
        DBLink DBLink = convertToDomain(dto, DBLink.class);
        DBLink = DBLinkRepository.save(DBLink);
        return convertToVO(DBLink, DBLinkVO.class);
    }

    @Override
    public DBLinkVO modify(Long id, DBLinkDTO dto) {
        Assert.notNull(id, "id must not be null.");

        return DBLinkRepository.findById(id)
                .map(existing -> {
                    DBLink DBLink = convert(dto, existing);
                    DBLink = DBLinkRepository.save(DBLink);
                    return convertToVO(DBLink, DBLinkVO.class);
                })
                .orElseThrow();
    }

    @Override
    public void remove(Long id) {
        DBLinkRepository.deleteById(id);
    }
}

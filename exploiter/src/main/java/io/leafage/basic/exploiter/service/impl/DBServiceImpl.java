/*
 * Copyright (c) 2024.  little3201.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.leafage.basic.exploiter.service.impl;

import io.leafage.basic.exploiter.domain.ColumnInfo;
import io.leafage.basic.exploiter.domain.TableInfo;
import io.leafage.basic.exploiter.service.DBService;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import java.sql.Types;
import java.util.List;

/**
 * db service for postgres
 *
 * @author wq li
 */
@Service
public class DBServiceImpl implements DBService {

    private final JdbcTemplate jdbcTemplate;

    public DBServiceImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public List<TableInfo> findAllTables() {
        String sql = "SELECT tablename as tableName, obj_description(oid, 'pg_class') AS table_comment " +
                "FROM pg_tables " +
                "JOIN pg_class ON pg_tables.tablename = pg_class.relname AND relkind = 'r' " +
                "WHERE schemaname = 'public'";
        return jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(TableInfo.class));
    }

    @Override
    public List<ColumnInfo> findAllColumnsByTableName(String tableName) {
        Assert.hasText(tableName, "tableName must not be empty.");
        String sql = "SELECT " +
                "    a.attname AS column_name, " +
                "    CASE WHEN t.typname = 'bpchar' THEN 'char' ELSE t.typname END AS data_type, " +
                "    CASE " +
                "        WHEN t.typname IN ('varchar', 'bpchar') THEN a.atttypmod - 4 " +
                "        WHEN a.attlen = -1 THEN NULL " +
                "        ELSE a.attlen " +
                "    END AS maximum_length, " +
                "    NOT a.attnotnull AS nullable, " +
                "    pg_get_expr(d.adbin, d.adrelid) AS column_default, " +
                "    col_description(a.attrelid, a.attnum) AS column_comment, " +
                "    CASE WHEN i.indisunique IS TRUE THEN true ELSE false END AS unique " +
                "FROM pg_attribute a " +
                "JOIN pg_class c ON a.attrelid = c.oid " +
                "LEFT JOIN pg_attrdef d ON a.attrelid = d.adrelid AND a.attnum = d.adnum " +
                "JOIN pg_namespace n ON c.relnamespace = n.oid " +
                "JOIN pg_type t ON a.atttypid = t.oid " +
                "LEFT JOIN pg_index i ON c.oid = i.indrelid AND a.attnum = ANY(i.indkey) AND i.indisunique = TRUE " +
                "WHERE c.relname = ? AND n.nspname = 'public' AND a.attnum > 0 AND NOT a.attisdropped " +
                "ORDER BY a.attnum";
        return jdbcTemplate.query(sql, new Object[]{tableName}, new int[]{Types.VARCHAR}, new BeanPropertyRowMapper<>(ColumnInfo.class));
    }
}
